name: 🤖 Project Board Automation
on:
  issues:
    types: [opened, closed, labeled, unlabeled, assigned, unassigned, milestoned, demilestoned]
  pull_request:
    types: [opened, closed, merged, ready_for_review, converted_to_draft]

jobs:
  issue_automation:
    name: Automate Issue Management
    runs-on: ubuntu-latest
    steps:
      - name: 🏷️ Auto-label new issues
        if: github.event.action == 'opened' && github.event.issue
        uses: actions/github-script@v7
        with:
          script: |
            // Auto-add status label to new issues
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['status: needs-planning']
            });
            
            // Auto-assign priority based on keywords
            const title = context.payload.issue.title.toLowerCase();
            const body = context.payload.issue.body?.toLowerCase() || '';
            
            let priorityLabel = '';
            if (title.includes('critical') || title.includes('production') || title.includes('security')) {
              priorityLabel = 'priority: critical';
            } else if (title.includes('bug') || title.includes('error') || title.includes('broken')) {
              priorityLabel = 'priority: high';
            } else if (title.includes('enhancement') || title.includes('feature')) {
              priorityLabel = 'priority: medium';
            } else {
              priorityLabel = 'priority: low';
            }
            
            if (priorityLabel) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [priorityLabel]
              });
            }

      - name: 📊 Update milestone progress
        if: github.event.action == 'closed' && github.event.issue
        uses: actions/github-script@v7
        with:
          script: |
            if (!context.payload.issue.milestone) return;
            
            const milestone = context.payload.issue.milestone;
            console.log(`Issue #${context.issue.number} closed in milestone: ${milestone.title}`);
            
            // Get milestone statistics
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone: milestone.number,
              state: 'all'
            });
            
            const totalIssues = issues.length;
            const closedIssues = issues.filter(issue => issue.state === 'closed').length;
            const progress = totalIssues > 0 ? Math.round((closedIssues / totalIssues) * 100) : 0;
            
            console.log(`Milestone progress: ${closedIssues}/${totalIssues} (${progress}%)`);

      - name: 🔄 Status transitions
        if: github.event.action == 'labeled'
        uses: actions/github-script@v7
        with:
          script: |
            const label = context.payload.label.name;
            
            // Remove conflicting status labels
            if (label.startsWith('status: ')) {
              const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              for (const currentLabel of currentLabels) {
                if (currentLabel.name.startsWith('status: ') && currentLabel.name !== label) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    name: currentLabel.name
                  });
                }
              }
            }

  pr_automation:
    name: Automate PR Management  
    runs-on: ubuntu-latest
    if: github.event.pull_request
    steps:
      - name: 🔗 Link PR to issues
        uses: actions/github-script@v7
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            const issueNumbers = prBody.match(/(?:fixes|closes|resolves)\s+#(\d+)/gi);
            
            if (issueNumbers) {
              for (const match of issueNumbers) {
                const issueNumber = match.match(/\d+/)[0];
                console.log(`PR #${context.payload.pull_request.number} linked to issue #${issueNumber}`);
                
                // Update linked issue status based on PR state
                let statusLabel = '';
                if (context.payload.pull_request.draft) {
                  statusLabel = 'status: in-progress';
                } else if (context.payload.pull_request.state === 'open') {
                  statusLabel = 'status: needs-review';
                }
                
                if (statusLabel) {
                  try {
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: parseInt(issueNumber),
                      labels: [statusLabel]
                    });
                  } catch (error) {
                    console.log(`Could not update issue #${issueNumber}: ${error.message}`);
                  }
                }
              }
            }

      - name: ✅ PR merged actions
        if: github.event.action == 'closed' && github.event.pull_request.merged
        uses: actions/github-script@v7
        with:
          script: |
            console.log(`PR #${context.payload.pull_request.number} was merged`);
            
            // Find linked issues and mark them as completed
            const prBody = context.payload.pull_request.body || '';
            const issueNumbers = prBody.match(/(?:fixes|closes|resolves)\s+#(\d+)/gi);
            
            if (issueNumbers) {
              for (const match of issueNumbers) {
                const issueNumber = match.match(/\d+/)[0];
                
                try {
                  // Close the linked issue
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parseInt(issueNumber),
                    state: 'closed'
                  });
                  
                  console.log(`Automatically closed issue #${issueNumber}`);
                } catch (error) {
                  console.log(`Could not close issue #${issueNumber}: ${error.message}`);
                }
              }
            }

  phase_tracking:
    name: Phase Progress Tracking
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event.issue
    steps:
      - name: 📈 Track phase completion
        uses: actions/github-script@v7
        with:
          script: |
            if (!context.payload.issue.milestone) return;
            
            const milestone = context.payload.issue.milestone;
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone: milestone.number,
              state: 'all'
            });
            
            const totalIssues = issues.length;
            const closedIssues = issues.filter(issue => issue.state === 'closed').length;
            const progress = totalIssues > 0 ? Math.round((closedIssues / totalIssues) * 100) : 0;
            
            // Create a progress comment if milestone is complete
            if (progress === 100 && totalIssues > 0) {
              const comment = `🎉 **Milestone Complete!** 
              
              ${milestone.title} has been completed with all ${totalIssues} issues resolved!
              
              Great work on completing this phase of development! 🚀`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }